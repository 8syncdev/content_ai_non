import React, { useState, useEffect } from 'react'
import { AppProvider, useApp } from '../contexts/AppContext'
import Layout from '../components/Layout'
import BrowserStatus from '../components/BrowserStatus'
import {
    Sparkles,
    Bot,
    Settings,
    Download,
    Search,
    Globe,
    Database,
    Archive,
    Activity,
    Zap,
    Target,
    TrendingUp,
    CheckSquare,
    Brain,
    Wand2,
    RefreshCw,
    Play,
    Square,
    FileText,
    AlertCircle,
    CheckCircle,
    Loader,
    Clock,
    Image,
    ArrowRight
} from 'lucide-react'

type SourceType = 'upvoted' | 'discussed' | 'latest' | 'tags'

function AiContentPage() {
    const { state, dispatch } = useApp()
    const [isInitialized, setIsInitialized] = useState(false)
    const [isLoading, setIsLoading] = useState(false)
    const [source, setSource] = useState<SourceType>('upvoted')
    const [tag, setTag] = useState('')
    const [articleCount, setArticleCount] = useState(10)
    const [template, setTemplate] = useState(
        'Vi·∫øt l·∫°i b√†i vi·∫øt sau theo phong c√°ch content marketing chuy√™n nghi·ªáp, t·∫≠p trung v√†o vi·ªác thu h√∫t kh√°ch h√†ng cho th∆∞∆°ng hi·ªáu [T√äN TH∆Ø∆†NG HI·ªÜU C·ª¶A B·∫†N]. N·ªôi dung c·∫ßn:\n\n1. 100% ti·∫øng Vi·ªát t·ª± nhi√™n v√† d·ªÖ hi·ªÉu\n2. Chu·∫©n SEO v·ªõi t·ª´ kh√≥a ph√π h·ª£p\n3. C√≥ call-to-action h·∫•p d·∫´n\n4. Tone gi·ªçng chuy√™n nghi·ªáp nh∆∞ng th√¢n thi·ªán\n5. T·∫°o gi√° tr·ªã th·ª±c s·ª± cho ng∆∞·ªùi ƒë·ªçc\n\nH√£y t·∫°o ra m·ªôt b√†i vi·∫øt ho√†n ch·ªânh v·ªõi ti√™u ƒë·ªÅ, n·ªôi dung ch√≠nh v√† k·∫øt lu·∫≠n.'
    )
    const [apiKey, setApiKey] = useState('')
    const [progress, setProgress] = useState<string[]>([])
    const [isRunning, setIsRunning] = useState(false)
    const [browserReady, setBrowserReady] = useState(false)
    const [stats, setStats] = useState({
        totalArticles: 0,
        processedArticles: 0,
        successRate: 0,
        exportedFiles: 0
    })
    const [currentStatus, setCurrentStatus] = useState({
        currentArticle: '',
        progress: { current: 0, total: 0 }
    })

    const sourceOptions = [
        {
            value: 'upvoted',
            label: 'B√†i vi·∫øt nhi·ªÅu votes nh·∫•t',
            description: 'Nh·ªØng b√†i vi·∫øt ƒë∆∞·ª£c c·ªông ƒë·ªìng vote cao nh·∫•t',
            icon: 'üëç',
            url: 'https://app.daily.dev/posts/upvoted'
        },
        {
            value: 'discussed',
            label: 'B√†i vi·∫øt nhi·ªÅu b√¨nh lu·∫≠n nh·∫•t',
            description: 'Nh·ªØng b√†i vi·∫øt c√≥ nhi·ªÅu th·∫£o lu·∫≠n v√† t∆∞∆°ng t√°c',
            icon: 'üí¨',
            url: 'https://app.daily.dev/posts/discussed'
        },
        {
            value: 'latest',
            label: 'B√†i vi·∫øt m·ªõi nh·∫•t',
            description: 'Nh·ªØng b√†i vi·∫øt ƒë∆∞·ª£c ƒëƒÉng g·∫ßn ƒë√¢y nh·∫•t',
            icon: 'üÜï',
            url: 'https://app.daily.dev/posts/latest'
        },
        {
            value: 'tags',
            label: 'Theo tags c·ª• th·ªÉ',
            description: 'Ch·ªçn b√†i vi·∫øt theo ch·ªß ƒë·ªÅ quan t√¢m',
            icon: 'üè∑Ô∏è',
            url: 'https://app.daily.dev/tags'
        }
    ]

    const handleBrowserStatusChange = (status: { browserExists: boolean; isInstalling: boolean }) => {
        setBrowserReady(status.browserExists && !status.isInstalling)
    }

    const addLog = (message: string) => {
        const timestamp = new Date().toLocaleTimeString()
        setProgress(prev => [...prev, `[${timestamp}] ${message}`])
    }

    const initializeScraper = async () => {
        if (!window.electron) {
            addLog('‚ùå Electron API kh√¥ng kh·∫£ d·ª•ng')
            return
        }

        setIsLoading(true)
        addLog('üîÑ Kh·ªüi t·∫°o AI Content Generator...')

        try {
            // First check if browser exists, if not auto-install
            addLog('üîç Ki·ªÉm tra browser...')
            const browserCheck = await window.electron.browser.check()

            if (!browserCheck.success || !browserCheck.data?.browserExists) {
                addLog('üì¶ Browser ch∆∞a c√≥, b·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t t·ª± ƒë·ªông...')
                const installResult = await window.electron.browser.checkAndInstall()

                if (!installResult.success) {
                    addLog(`‚ùå L·ªói c√†i ƒë·∫∑t browser: ${installResult.error}`)
                    return
                }
                addLog('‚úÖ Browser ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!')
            } else {
                addLog('‚úÖ Browser ƒë√£ s·∫µn s√†ng')
            }

            // Now initialize AI Content Generator
            const result = await window.electron.aiContent.initialize()
            if (result.success) {
                setIsInitialized(true)
                addLog('‚úÖ AI Content Generator ƒë√£ s·∫µn s√†ng')
            } else {
                addLog(`‚ùå L·ªói kh·ªüi t·∫°o: ${result.error}`)
            }
        } catch (error) {
            addLog(`‚ùå L·ªói kh·ªüi t·∫°o: ${error.message}`)
        } finally {
            setIsLoading(false)
        }
    }

    const handleStart = async () => {
        if (!isInitialized) {
            addLog('‚ùå Vui l√≤ng kh·ªüi t·∫°o AI Content Generator tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu')
            return
        }

        if (source === 'tags' && !tag.trim()) {
            addLog('‚ùå Vui l√≤ng nh·∫≠p tag khi ch·ªçn ngu·ªìn "Theo tags"')
            return
        }

        setIsRunning(true)
        setCurrentStatus({
            currentArticle: '',
            progress: { current: 0, total: articleCount }
        })
        setStats({
            totalArticles: articleCount,
            processedArticles: 0,
            successRate: 0,
            exportedFiles: 0
        })

        const selectedSource = sourceOptions.find(s => s.value === source)
        addLog(`üöÄ B·∫Øt ƒë·∫ßu thu th·∫≠p ${articleCount} b√†i vi·∫øt t·ª´: ${selectedSource?.label}`)

        if (source === 'tags') {
            addLog(`üè∑Ô∏è Tag ƒë∆∞·ª£c ch·ªçn: ${tag}`)
        }

        addLog(`ü§ñ Template AI: ${template.substring(0, 100)}...`)

        try {
            // G·ªçi API backend ƒë·ªÉ x·ª≠ l√Ω
            const result = await window.electron.aiContent.start({
                source,
                tag: source === 'tags' ? tag : undefined,
                articleCount,
                template,
                apiKey
            })

            if (result.success) {
                addLog('‚úÖ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω th√†nh c√¥ng')
            } else {
                addLog(`‚ùå L·ªói b·∫Øt ƒë·∫ßu x·ª≠ l√Ω: ${result.error}`)
                setIsRunning(false)
            }
        } catch (error) {
            addLog(`‚ùå L·ªói: ${error.message}`)
            setIsRunning(false)
        }
    }

    const stopProcessing = () => {
        setIsRunning(false)
        addLog('‚èπÔ∏è ƒê√£ d·ª´ng x·ª≠ l√Ω')
    }

    const clearLogs = () => {
        setProgress([])
    }

    useEffect(() => {
        initializeScraper()

        // L·∫Øng nghe progress events
        const handleProgress = (message: string) => {
            addLog(message)

            // Update stats n·∫øu c√≥ pattern match
            if (message.includes('[') && message.includes('/')) {
                const match = message.match(/\[(\d+)\/(\d+)\]/)
                if (match) {
                    const current = parseInt(match[1])
                    const total = parseInt(match[2])
                    setCurrentStatus(prev => ({
                        ...prev,
                        progress: { current, total }
                    }))
                    setStats(prev => ({
                        ...prev,
                        processedArticles: current
                    }))
                }
            }

            if (message.includes('ƒêang x·ª≠ l√Ω:')) {
                const articleMatch = message.match(/ƒêang x·ª≠ l√Ω: (.+)/)
                if (articleMatch) {
                    setCurrentStatus(prev => ({
                        ...prev,
                        currentArticle: articleMatch[1]
                    }))
                }
            }

            if (message.includes('‚úÖ') && message.includes('ƒê√£ l∆∞u')) {
                setStats(prev => ({
                    ...prev,
                    exportedFiles: prev.exportedFiles + 1,
                    successRate: Math.round(((prev.exportedFiles + 1) / Math.max(prev.processedArticles, 1)) * 100)
                }))
            }
        }

        const handleDone = (message: string) => {
            addLog(message)
            setIsRunning(false)
            addLog('üéâ Ho√†n th√†nh t·∫°o n·ªôi dung AI!')
        }

        const cleanupProgress = window.electron?.ipcRenderer?.on('ai-content:progress', handleProgress)
        const cleanupDone = window.electron?.ipcRenderer?.on('ai-content:done', handleDone)

        return () => {
            if (cleanupProgress) cleanupProgress()
            if (cleanupDone) cleanupDone()
            // Cleanup AI Content Generator when component unmounts
            if (window.electron) {
                window.electron.aiContent.close()
            }
        }
    }, [])

    const renderQuickStart = () => (
        <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl p-6 text-white mb-6 shadow-xl">
            <div className="flex items-center justify-between">
                <div className="flex-1">
                    <div className="flex items-center mb-3">
                        <div className="p-2 bg-white/20 rounded-xl mr-3">
                            <Sparkles className="w-6 h-6 text-white" />
                        </div>
                        <div>
                            <h2 className="text-xl font-bold mb-1 text-white">Sinh Content AI</h2>
                            <p className="text-purple-100 text-base">
                                T·ª± ƒë·ªông t·∫°o content marketing t·ª´ b√†i vi·∫øt hot tr√™n Daily.dev
                            </p>
                        </div>
                    </div>
                </div>
                <div className="flex space-x-3">
                    <button
                        onClick={initializeScraper}
                        disabled={isLoading}
                        className="bg-white/20 text-white px-4 py-2 rounded-xl font-semibold hover:bg-white/30 transition-all duration-300 flex items-center space-x-2 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:opacity-50"
                    >
                        {isLoading ? <Loader className="w-4 h-4 animate-spin" /> : <RefreshCw className="w-4 h-4" />}
                        <span>{isLoading ? 'ƒêang kh·ªüi t·∫°o...' : 'Kh·ªüi t·∫°o'}</span>
                    </button>
                    <button
                        onClick={handleStart}
                        disabled={!isInitialized || isRunning}
                        className="bg-white text-purple-600 px-6 py-2 rounded-xl font-semibold hover:bg-purple-50 transition-all duration-300 flex items-center space-x-2 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:opacity-50"
                    >
                        <Play className="w-4 h-4" />
                        <span>B·∫Øt ƒë·∫ßu</span>
                        <ArrowRight className="w-4 h-4" />
                    </button>
                </div>
            </div>

            {/* Browser Status Warning */}
            {!browserReady && (
                <div className="mt-4 pt-4 border-t border-white/20">
                    <div className="flex items-center text-yellow-200">
                        <AlertCircle className="w-4 h-4 mr-2" />
                        <span className="text-sm font-medium">
                            ‚ÑπÔ∏è Browser s·∫Ω ƒë∆∞·ª£c c√†i ƒë·∫∑t t·ª± ƒë·ªông khi kh·ªüi t·∫°o l·∫ßn ƒë·∫ßu ti√™n.
                        </span>
                    </div>
                </div>
            )}
        </div>
    )

    const renderStats = () => (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-gradient-to-br from-white to-blue-50 rounded-2xl p-4 shadow-lg border border-blue-100">
                <div className="flex items-center justify-between mb-3">
                    <div className="p-2 bg-blue-100 rounded-xl">
                        <Target className="w-5 h-5 text-blue-600" />
                    </div>
                    <div className="text-right">
                        <p className="text-xl font-bold text-gray-900">{stats.totalArticles}</p>
                        <p className="text-blue-600 font-medium text-xs">b√†i vi·∫øt</p>
                    </div>
                </div>
                <h3 className="text-base font-semibold text-gray-800 mb-1">T·ªïng m·ª•c ti√™u</h3>
                <p className="text-xs text-gray-500">S·ªë b√†i vi·∫øt c·∫ßn x·ª≠ l√Ω</p>
            </div>

            <div className="bg-gradient-to-br from-white to-green-50 rounded-2xl p-4 shadow-lg border border-green-100">
                <div className="flex items-center justify-between mb-3">
                    <div className="p-2 bg-green-100 rounded-xl">
                        <CheckSquare className="w-5 h-5 text-green-600" />
                    </div>
                    <div className="text-right">
                        <p className="text-xl font-bold text-gray-900">{stats.processedArticles}</p>
                        <p className="text-green-600 font-medium text-xs">ƒë√£ x·ª≠ l√Ω</p>
                    </div>
                </div>
                <h3 className="text-base font-semibold text-gray-800 mb-1">Ti·∫øn ƒë·ªô</h3>
                <p className="text-xs text-gray-500">B√†i vi·∫øt ƒë√£ crawl</p>
            </div>

            <div className="bg-gradient-to-br from-white to-purple-50 rounded-2xl p-4 shadow-lg border border-purple-100">
                <div className="flex items-center justify-between mb-3">
                    <div className="p-2 bg-purple-100 rounded-xl">
                        <Archive className="w-5 h-5 text-purple-600" />
                    </div>
                    <div className="text-right">
                        <p className="text-xl font-bold text-gray-900">{stats.exportedFiles}</p>
                        <p className="text-purple-600 font-medium text-xs">file AI</p>
                    </div>
                </div>
                <h3 className="text-base font-semibold text-gray-800 mb-1">ƒê√£ t·∫°o</h3>
                <p className="text-xs text-gray-500">Content AI ƒë√£ sinh</p>
            </div>

            <div className="bg-gradient-to-br from-white to-orange-50 rounded-2xl p-4 shadow-lg border border-orange-100">
                <div className="flex items-center justify-between mb-3">
                    <div className="p-2 bg-orange-100 rounded-xl">
                        <TrendingUp className="w-5 h-5 text-orange-600" />
                    </div>
                    <div className="text-right">
                        <p className="text-xl font-bold text-gray-900">{stats.successRate}<span className="text-lg text-orange-600">%</span></p>
                        <p className="text-orange-600 font-medium text-xs">th√†nh c√¥ng</p>
                    </div>
                </div>
                <h3 className="text-base font-semibold text-gray-800 mb-1">T·ª∑ l·ªá th√†nh c√¥ng</h3>
                <p className="text-xs text-gray-500">Hi·ªáu su·∫•t AI processing</p>
            </div>
        </div>
    )

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-50 via-purple-50 to-pink-50 p-4">
            {/* Header */}
            <div className="mb-6">
                <h1 className="text-3xl font-bold text-gray-900 mb-2">
                    Sinh n·ªôi dung AI
                </h1>
                <p className="text-gray-600 text-lg">
                    T·ª± ƒë·ªông t·∫°o content marketing t·ª´ b√†i vi·∫øt hot tr√™n Daily.dev
                </p>
            </div>

            {/* Browser Status */}
            <div className="mb-6">
                <BrowserStatus onStatusChange={handleBrowserStatusChange} />
            </div>

            {/* Quick Start */}
            {renderQuickStart()}

            {/* Stats */}
            {renderStats()}

            {/* Main Content */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Settings Panel */}
                <div className="lg:col-span-2 bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
                    <div className="flex items-center space-x-3 mb-6">
                        <div className="p-3 bg-purple-100 rounded-2xl">
                            <Settings className="w-6 h-6 text-purple-600" />
                        </div>
                        <h2 className="text-2xl font-bold text-gray-800">C·∫•u h√¨nh</h2>
                    </div>

                    <div className="space-y-6">
                        {/* Source Selection */}
                        <div>
                            <label className="block text-lg font-bold text-gray-700 mb-4">
                                Ngu·ªìn b√†i vi·∫øt
                            </label>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {sourceOptions.map((option) => (
                                    <div
                                        key={option.value}
                                        onClick={() => setSource(option.value as SourceType)}
                                        className={`cursor-pointer border-2 rounded-2xl p-4 transition-all duration-300 transform hover:scale-105 ${source === option.value
                                            ? 'border-purple-500 bg-gradient-to-br from-purple-50 to-purple-100 shadow-lg scale-105'
                                            : 'border-gray-200 hover:border-gray-300 bg-white hover:shadow-lg'
                                            }`}
                                    >
                                        <div className="flex items-start justify-between">
                                            <div className="flex-1">
                                                <div className="flex items-center mb-2">
                                                    <span className="text-2xl mr-3">{option.icon}</span>
                                                    <h4 className="font-bold text-gray-900">{option.label}</h4>
                                                </div>
                                                <p className="text-sm text-gray-600 mb-3">{option.description}</p>
                                                <code className="text-xs bg-gray-100 px-2 py-1 rounded">{option.url}</code>
                                            </div>
                                            <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center transition-all ${source === option.value
                                                ? 'border-purple-500 bg-purple-500'
                                                : 'border-gray-300'
                                                }`}>
                                                {source === option.value && (
                                                    <CheckCircle className="w-4 h-4 text-white" />
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        {/* Tag Input (Conditional) */}
                        {source === 'tags' && (
                            <div>
                                <label className="block text-lg font-bold text-gray-700 mb-3">
                                    Nh·∫≠p Tag
                                </label>
                                <div className="relative">
                                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                                    <input
                                        type="text"
                                        value={tag}
                                        onChange={(e) => setTag(e.target.value)}
                                        placeholder="v√≠ d·ª•: javascript, react, ai, webdev..."
                                        className="w-full pl-10 p-4 bg-gray-50 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg"
                                    />
                                </div>
                                <p className="text-sm text-gray-500 mt-2">
                                    üí° Nh·∫≠p t√™n tag ƒë·ªÉ l·∫•y b√†i vi·∫øt theo ch·ªß ƒë·ªÅ c·ª• th·ªÉ
                                </p>
                            </div>
                        )}

                        {/* Article Count */}
                        <div>
                            <label className="block text-lg font-bold text-gray-700 mb-3">
                                S·ªë l∆∞·ª£ng b√†i vi·∫øt c·∫ßn qu√©t
                            </label>
                            <input
                                type="number"
                                value={articleCount}
                                onChange={(e) => setArticleCount(parseInt(e.target.value) || 1)}
                                min="1"
                                max="100"
                                className="w-full p-4 bg-gray-50 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg"
                            />
                            <p className="text-sm text-gray-500 mt-2">
                                üìä Gi·ªõi h·∫°n t·ª´ 1-100 b√†i vi·∫øt ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu su·∫•t
                            </p>
                        </div>

                        {/* AI Template */}
                        <div>
                            <label className="block text-lg font-bold text-gray-700 mb-3">
                                Template cho AI
                            </label>
                            <textarea
                                value={template}
                                onChange={(e) => setTemplate(e.target.value)}
                                rows={8}
                                className="w-full p-4 bg-gray-50 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-base"
                                placeholder="Nh·∫≠p h∆∞·ªõng d·∫´n chi ti·∫øt cho AI v·ªÅ c√°ch vi·∫øt l·∫°i content..."
                            />
                            <p className="text-sm text-gray-500 mt-2">
                                ü§ñ Template n√†y s·∫Ω ƒë∆∞·ª£c g·ª≠i c√πng n·ªôi dung b√†i vi·∫øt ƒë·ªÉ AI x·ª≠ l√Ω
                            </p>
                        </div>

                        {/* API Key */}
                        <div>
                            <label className="block text-lg font-bold text-gray-700 mb-3">
                                API Key
                            </label>
                            <input
                                type="text"
                                value={apiKey}
                                onChange={(e) => setApiKey(e.target.value)}
                                className="w-full p-4 bg-gray-50 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition text-lg"
                                placeholder="Nh·∫≠p API key c·ªßa b·∫°n"
                            />
                            <p className="text-sm text-gray-500 mt-2">
                                üîë API key gi√∫p tƒÉng t·ªëc ƒë·ªô v√† ƒë·ªô ch√≠nh x√°c c·ªßa AI
                            </p>
                        </div>
                    </div>
                </div>

                {/* Control & Progress Panel */}
                <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100 flex flex-col">
                    <div className="flex items-center space-x-3 mb-6">
                        <div className="p-3 bg-green-100 rounded-2xl">
                            <Bot className="w-6 h-6 text-green-600" />
                        </div>
                        <h2 className="text-xl font-bold text-gray-800">ƒêi·ªÅu khi·ªÉn & Ti·∫øn tr√¨nh</h2>
                    </div>

                    {/* Control Buttons */}
                    <div className="space-y-3 mb-6">
                        <button
                            onClick={handleStart}
                            disabled={isRunning || !isInitialized || !browserReady}
                            className="w-full flex items-center justify-center space-x-2 bg-gradient-to-r from-purple-500 to-pink-600 text-white font-semibold py-3 px-6 rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            <Play className="w-5 h-5" />
                            <span>{isRunning ? 'ƒêang x·ª≠ l√Ω...' : 'B·∫Øt ƒë·∫ßu t·∫°o content'}</span>
                        </button>

                        <button
                            onClick={stopProcessing}
                            disabled={!isRunning}
                            className="w-full flex items-center justify-center space-x-2 bg-red-500 hover:bg-red-600 text-white font-semibold py-3 px-6 rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            <Square className="w-5 h-5" />
                            <span>D·ª´ng x·ª≠ l√Ω</span>
                        </button>
                    </div>

                    {/* Progress */}
                    {(currentStatus.progress.total > 0 || isRunning) && (
                        <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl p-4 mb-6 border border-purple-200">
                            <h3 className="font-bold text-purple-800 mb-3 flex items-center">
                                <Activity className="w-4 h-4 mr-2" />
                                Ti·∫øn ƒë·ªô x·ª≠ l√Ω
                                {isRunning && (
                                    <div className="ml-3 flex items-center space-x-2">
                                        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                                        <span className="text-green-600 font-medium text-sm">ƒêang ch·∫°y</span>
                                    </div>
                                )}
                            </h3>
                            <div className="space-y-3">
                                <div>
                                    <div className="flex justify-between text-sm mb-2 font-semibold text-purple-700">
                                        <span>T·ªïng ti·∫øn ƒë·ªô</span>
                                        <span>{currentStatus.progress.current}/{currentStatus.progress.total}</span>
                                    </div>
                                    <div className="w-full bg-purple-200 rounded-full h-2 shadow-inner">
                                        <div
                                            className="bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full transition-all duration-500 shadow-sm"
                                            style={{
                                                width: `${currentStatus.progress.total > 0 ? (currentStatus.progress.current / currentStatus.progress.total) * 100 : 0}%`
                                            }}
                                        ></div>
                                    </div>
                                    <div className="text-xs text-purple-600 mt-1">
                                        {currentStatus.progress.total > 0 && `${Math.round((currentStatus.progress.current / currentStatus.progress.total) * 100)}% ho√†n th√†nh`}
                                    </div>
                                </div>
                                {currentStatus.currentArticle && (
                                    <div className="bg-white/70 p-3 rounded-xl border border-purple-200">
                                        <p className="text-sm font-semibold text-purple-800 flex items-center">
                                            <FileText className="w-4 h-4 mr-2" />
                                            <strong>ƒêang x·ª≠ l√Ω:</strong> {currentStatus.currentArticle}
                                        </p>
                                    </div>
                                )}
                            </div>
                        </div>
                    )}

                    {/* Logs */}
                    <div className="bg-gray-900 rounded-xl p-4 flex-grow min-h-[300px] overflow-y-auto">
                        <div className="flex items-center justify-between mb-3">
                            <h3 className="text-white font-bold flex items-center">
                                <FileText className="w-4 h-4 mr-2" />
                                Nh·∫≠t k√Ω ho·∫°t ƒë·ªông
                            </h3>
                            <button
                                onClick={clearLogs}
                                className="text-gray-400 hover:text-white text-sm px-2 py-1 rounded transition"
                            >
                                X√≥a
                            </button>
                        </div>
                        <div className="text-sm font-mono text-gray-300 space-y-1">
                            {progress.length === 0 ? (
                                <div className="text-center py-8">
                                    <Clock className="w-8 h-8 text-gray-600 mx-auto mb-2" />
                                    <p className="text-gray-500 italic">Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o...</p>
                                </div>
                            ) : (
                                progress.map((line, index) => (
                                    <p key={index} className="whitespace-pre-wrap">
                                        <span className="text-green-400 mr-2">‚Ä∫</span>
                                        {line}
                                    </p>
                                ))
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default function AiContent() {
    return (
        <AppProvider>
            <Layout>
                <AiContentPage />
            </Layout>
        </AppProvider>
    )
} 