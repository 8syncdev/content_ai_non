import { DEFAULT_AI_CONFIG, AI_PROCESSING_POLICIES, ProcessingPolicy, TemplateType } from '../template/info-const'
import type { ProblemContent } from '../../scraper'
import { ExerciseTemplateProcessor } from '../template/exercise'
import { LessonTemplateProcessor } from '../template/lesson'

// Note: Requires npm install ai @ai-sdk/mistral
// Uncomment when AI SDK is installed:
// import { streamText, generateText } from 'ai'
// import { mistral } from '@ai-sdk/mistral'
// import { createStreamableValue } from 'ai/rsc'

export interface Message {
    role: 'user' | 'assistant'
    content: string
    timestamp: Date
}

export interface AIConfig {
    provider: 'mistral' | 'openai' | 'claude'
    apiKey: string
    model: string
    temperature: number
    maxTokens: number
}

export interface AIProcessingOptions {
    templateType: TemplateType | 'raw'
    useStream: boolean
    policy: ProcessingPolicy
    customPrompt?: string
}

export interface AIResponse {
    success: boolean
    data?: string
    error?: string
    rawResponse?: string
    processingTime?: number
    metadata?: any
}

export interface StreamResponse {
    success: boolean
    stream?: any // ReadableStream<string> when AI SDK is available
    error?: string
}

export class ChatAIActions {
    private config: AIConfig

    constructor(config?: Partial<AIConfig>) {
        this.config = { ...DEFAULT_AI_CONFIG, ...config }
    }

    updateConfig(newConfig: Partial<AIConfig>): void {
        this.config = { ...this.config, ...newConfig }
    }

    /**
     * X·ª≠ l√Ω content v·ªõi AI (no-stream mode - m·∫∑c ƒë·ªãnh)
     * D·ª±a tr√™n pattern t·ª´ continueConversation function
     */
    async processContent(
        content: ProblemContent,
        options: AIProcessingOptions
    ): Promise<AIResponse> {
        const startTime = Date.now()

        try {
            console.log(`ü§ñ ChatAIActions.processContent called`)
            console.log(`üìã Template: ${options.templateType}, Policy: ${options.policy}`)
            console.log(`üìä Content: ${content.title}`)

            // Validate input
            if (!content || !content.title) {
                throw new Error('Invalid content provided')
            }

            // Log content structure for debugging
            console.log(`üìä Content structure:`)
            console.log(`  - Title: ${content.title}`)
            console.log(`  - Description: ${content.description?.substring(0, 100)}...`)
            console.log(`  - Methods: ${content.methods?.length || 0}`)
            console.log(`  - Test cases: ${content.testCases?.length || 0}`)
            console.log(`  - Solutions: ${content.solutions?.length || 0}`)

            let processedContent: string
            let metadata: any = {}

            // Use template processors to generate proper prompts and responses
            if (options.templateType === 'exercise') {
                console.log(`üéØ Using Exercise Template Processor`)
                const { ExerciseTemplateProcessor } = require('../template/exercise')

                // Generate prompt using template processor
                const prompt = ExerciseTemplateProcessor.generatePrompt(content)
                console.log(`üìù Generated prompt length: ${prompt.length}`)

                // For now, use mock response but with proper template structure
                processedContent = this.generateExerciseResponse(content)

                // Validate output using template processor
                const isValid = ExerciseTemplateProcessor.validateOutput(processedContent)
                console.log(`‚úÖ Template validation: ${isValid}`)

                // Extract metadata using template processor
                metadata = ExerciseTemplateProcessor.extractMetadata(processedContent)
                console.log(`üè∑Ô∏è Extracted metadata:`, metadata)

            } else if (options.templateType === 'lesson') {
                console.log(`üéØ Using Lesson Template Processor`)
                const { LessonTemplateProcessor } = require('../template/lesson')

                // Generate prompt using template processor
                const prompt = LessonTemplateProcessor.generatePrompt(content)
                console.log(`üìù Generated prompt length: ${prompt.length}`)

                // For now, use mock response but with proper template structure
                processedContent = this.generateLessonResponse(content)

                // Validate output using template processor
                const isValid = LessonTemplateProcessor.validateOutput(processedContent)
                console.log(`‚úÖ Template validation: ${isValid}`)

                // Extract metadata using template processor
                metadata = LessonTemplateProcessor.extractMetadata(processedContent)
                console.log(`üè∑Ô∏è Extracted metadata:`, metadata)

            } else {
                console.log(`üìù Using raw processing`)
                processedContent = this.generateRawResponse(content)
                metadata = {
                    title: content.title,
                    processingType: 'raw'
                }
            }

            const processingTime = Date.now() - startTime
            console.log(`‚è±Ô∏è Processing completed in ${processingTime}ms`)
            console.log(`üìè Output length: ${processedContent.length} characters`)

            return {
                success: true,
                data: processedContent,
                processingTime,
                metadata,
                rawResponse: processedContent
            }

        } catch (error) {
            const processingTime = Date.now() - startTime
            console.error(`‚ùå AI processing error:`, error)

            return {
                success: false,
                error: error.message,
                processingTime
            }
        }
    }

    /**
     * X·ª≠ l√Ω content v·ªõi AI (stream mode)
     * D·ª±a tr√™n pattern t·ª´ continueConversation function
     */
    async processContentStream(
        content: ProblemContent,
        options: AIProcessingOptions
    ): Promise<StreamResponse> {
        try {
            // Validate API key - allow default key for demo
            if (!this.config.apiKey) {
                return {
                    success: false,
                    error: 'Vui l√≤ng c·∫•u h√¨nh API key trong settings'
                }
            }

            const policyConfig = AI_PROCESSING_POLICIES[options.policy]
            let prompt: string

            // T·∫°o prompt theo template
            switch (options.templateType) {
                case 'exercise':
                    prompt = ExerciseTemplateProcessor.generatePrompt(content)
                    break
                case 'lesson':
                    prompt = LessonTemplateProcessor.generatePrompt(content)
                    break
                case 'raw':
                    prompt = options.customPrompt || this.generateRawPrompt(content)
                    break
                default:
                    throw new Error('Invalid template type')
            }

            // TODO: Uncomment when AI SDK is installed
            /*
            console.log('Processing stream with API key:', this.config.apiKey)
            process.env.MISTRAL_API_KEY = this.config.apiKey

            const stream = createStreamableValue()

            // Format history for AI (similar to continueConversation)
            const messages = [
                {
                    role: 'user' as const,
                    content: this.formatPromptForAI(prompt)
                }
            ]

            // Start streaming
            ;(async () => {
                const { textStream } = await streamText({
                    model: mistral(policyConfig.model),
                    system: `B·∫°n l√† chuy√™n gia gi√°o d·ª•c l·∫≠p tr√¨nh Python. H√£y chuy·ªÉn ƒë·ªïi n·ªôi dung theo y√™u c·∫ßu:
- D·ªãch sang ti·∫øng Vi·ªát t·ª± nhi√™n
- Gi·ªØ nguy√™n 100% test cases g·ªëc  
- C·∫•u tr√∫c markdown chu·∫©n
- Gi·∫£i th√≠ch chi ti·∫øt d·ªÖ hi·ªÉu
- Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi h·ªçc`,
                    messages: messages,
                    maxTokens: policyConfig.maxTokens,
                    temperature: policyConfig.temperature,
                })

                for await (const text of textStream) {
                    stream.update(text)
                }

                stream.done()
            })()

            return {
                success: true,
                stream: stream.value
            }
            */

            // Mock stream for development (remove when AI SDK is installed)
            const mockStream = this.createMockStream(content, options)

            return {
                success: true,
                stream: mockStream
            }

        } catch (error) {
            return {
                success: false,
                error: error.message || 'L·ªói x·ª≠ l√Ω AI stream kh√¥ng x√°c ƒë·ªãnh'
            }
        }
    }

    /**
     * T·∫°o prompt raw ƒë∆°n gi·∫£n
     */
    private generateRawPrompt(content: ProblemContent): string {
        return `
H√£y chuy·ªÉn ƒë·ªïi n·ªôi dung b√†i t·∫≠p l·∫≠p tr√¨nh sau sang ti·∫øng Vi·ªát v·ªõi format markdown chu·∫©n:

Ti√™u ƒë·ªÅ: ${content.title}
M√¥ t·∫£: ${content.description}

Solutions:
${content.solutions.map((sol, i) => `Solution ${i + 1}:\n${sol}`).join('\n\n')}

Test Cases:
${content.testCases.join('\n')}

Y√™u c·∫ßu:
- D·ªãch sang ti·∫øng Vi·ªát t·ª± nhi√™n
- Gi·ªØ nguy√™n 100% test cases
- Th√™m comment ti·∫øng Vi·ªát v√†o code
- C·∫•u tr√∫c markdown r√µ r√†ng
- Gi·∫£i th√≠ch chi ti·∫øt
        `
    }

    /**
     * Format prompt for AI (similar to formatUserMessage)
     */
    private formatPromptForAI(content: string): string {
        return `[CONTENT_CONVERSION_REQUEST]\n${content}\n[/CONTENT_CONVERSION_REQUEST]`
    }

    /**
     * T·∫°o response theo template exercise
     */
    private generateExerciseResponse(content: ProblemContent): string {
        const { BRAND_INFO } = require('../template/info-const')

        // D·ªãch ƒë·ªÅ b√†i sang ti·∫øng Vi·ªát
        const vietnameseTitle = this.translateTitle(content.title)
        const vietnameseDescription = this.translateDescription(content.description)

        return `# ${vietnameseTitle}

## üìù ƒê·ªÅ b√†i
${vietnameseDescription}

## üí° Gi·∫£i th√≠ch ƒë·ªÅ b√†i
H√£y c√πng ph√¢n t√≠ch y√™u c·∫ßu c·ªßa b√†i t·∫≠p n√†y m·ªôt c√°ch chi ti·∫øt:

- **M·ª•c ti√™u:** Hi·ªÉu v√† √°p d·ª•ng c√°c kh√°i ni·ªám l·∫≠p tr√¨nh c∆° b·∫£n ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ th·ª±c t·∫ø
- **Input:** D·ªØ li·ªáu ƒë·∫ßu v√†o s·∫Ω ƒë∆∞·ª£c cung c·∫•p theo ƒë·ªãnh d·∫°ng c·ª• th·ªÉ trong ƒë·ªÅ b√†i
- **Output:** Ch∆∞∆°ng tr√¨nh c·∫ßn tr·∫£ v·ªÅ k·∫øt qu·∫£ ch√≠nh x√°c theo y√™u c·∫ßu ƒë√£ n√™u
- **Thu·∫≠t ng·ªØ c·∫ßn bi·∫øt:** 
  - *Bi·∫øn (Variable)*: V√πng nh·ªõ ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu trong ch∆∞∆°ng tr√¨nh
  - *H√†m (Function)*: Kh·ªëi l·ªánh th·ª±c hi·ªán m·ªôt nhi·ªám v·ª• c·ª• th·ªÉ
  - *V√≤ng l·∫∑p (Loop)*: C·∫•u tr√∫c ƒë·ªÉ l·∫∑p l·∫°i m·ªôt ƒëo·∫°n code nhi·ªÅu l·∫ßn
  - *ƒêi·ªÅu ki·ªán (Condition)*: C·∫•u tr√∫c ƒë·ªÉ ki·ªÉm tra v√† th·ª±c hi·ªán c√°c h√†nh ƒë·ªông kh√°c nhau

## üß™ Test Cases
${this.generateTestCasesSection(content)}

## üîç Gi·∫£i th√≠ch Test Cases
${this.generateTestCasesExplanation(content)}

## üíª Code v√† Gi·∫£i th√≠ch

${content.methods.map((method, index) => `
### Ph∆∞∆°ng ph√°p ${index + 1}: ${this.translateMethodName(method.name)}
**√ù t∆∞·ªüng:** ${this.translateDescription(method.description)}

\`\`\`python
${method.sourceCode.split('\n').map(line => {
            if (line.trim() === '') return line;
            // Th√™m comment ti·∫øng Vi·ªát cho t·ª´ng d√≤ng code
            const comment = line.includes('def ') ? '# ƒê·ªãnh nghƒ©a h√†m' :
                line.includes('return') ? '# Tr·∫£ v·ªÅ k·∫øt qu·∫£' :
                    line.includes('for ') ? '# V√≤ng l·∫∑p for' :
                        line.includes('while ') ? '# V√≤ng l·∫∑p while' :
                            line.includes('if ') ? '# ƒêi·ªÅu ki·ªán if' :
                                line.includes('elif ') ? '# ƒêi·ªÅu ki·ªán elif' :
                                    line.includes('else') ? '# Tr∆∞·ªùng h·ª£p c√≤n l·∫°i' :
                                        line.includes('print') ? '# In k·∫øt qu·∫£ ra m√†n h√¨nh' :
                                            line.includes('input') ? '# Nh·∫≠p d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng' :
                                                line.includes('=') && !line.includes('==') ? '# G√°n gi√° tr·ªã cho bi·∫øn' :
                                                    '# Th·ª±c hi·ªán ph√©p t√≠nh';
            return line + '  ' + comment;
        }).join('\n')}
\`\`\`

**Gi·∫£i th√≠ch chi ti·∫øt:**
1. **Kh·ªüi t·∫°o:** ƒê·ªãnh nghƒ©a c√°c bi·∫øn v√† h√†m c·∫ßn thi·∫øt
2. **X·ª≠ l√Ω logic:** Th·ª±c hi·ªán thu·∫≠t to√°n ch√≠nh ƒë·ªÉ gi·∫£i quy·∫øt b√†i to√°n
3. **Tr·∫£ v·ªÅ k·∫øt qu·∫£:** Xu·∫•t ra k·∫øt qu·∫£ cu·ªëi c√πng theo y√™u c·∫ßu

**ƒê·ªô ph·ª©c t·∫°p:**
- **Th·ªùi gian:** ${this.extractTimeComplexity(method.complexity)} - Ph·ª• thu·ªôc v√†o k√≠ch th∆∞·ªõc d·ªØ li·ªáu ƒë·∫ßu v√†o
- **Kh√¥ng gian:** O(1) - S·ª≠ d·ª•ng b·ªô nh·ªõ c·ªë ƒë·ªãnh
`).join('\n')}

## üìö T√†i li·ªáu tham kh·∫£o

### H·ªçc th√™m:
- [Python C∆° b·∫£n - H∆∞·ªõng d·∫´n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu](https://docs.python.org/3/tutorial/)
- [Thu·∫≠t to√°n v√† C·∫•u tr√∫c d·ªØ li·ªáu c∆° b·∫£n](https://www.geeksforgeeks.org/python-programming-language/)
- [Luy·ªán t·∫≠p l·∫≠p tr√¨nh online mi·ªÖn ph√≠](https://www.hackerrank.com/domains/python)
- [Kh√≥a h·ªçc Python mi·ªÖn ph√≠](https://www.codecademy.com/learn/learn-python-3)

### C√¢u h·ªèi m·ªü r·ªông:
1. B·∫°n c√≥ th·ªÉ t·ªëi ∆∞u h√≥a thu·∫≠t to√°n n√†y ƒë·ªÉ ch·∫°y nhanh h∆°n kh√¥ng?
2. N·∫øu thay ƒë·ªïi ƒëi·ªÅu ki·ªán ƒë·∫ßu v√†o, code c·∫ßn s·ª≠a ƒë·ªïi nh∆∞ th·∫ø n√†o?
3. C√≥ c√°ch n√†o kh√°c ƒë·ªÉ gi·∫£i quy·∫øt b√†i to√°n n√†y kh√¥ng?
4. L√†m th·∫ø n√†o ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát (edge cases)?

---
${BRAND_INFO}`
    }

    /**
     * D·ªãch ti√™u ƒë·ªÅ sang ti·∫øng Vi·ªát
     */
    private translateTitle(title: string): string {
        const translations = {
            'Python Program to Check if a Number is Odd or Even': 'Ch∆∞∆°ng tr√¨nh Python ki·ªÉm tra s·ªë ch·∫µn l·∫ª',
            'Python Program to Check Whether a Number is Positive or Negative': 'Ch∆∞∆°ng tr√¨nh Python ki·ªÉm tra s·ªë d∆∞∆°ng √¢m',
            'Python Program to Print All Odd Numbers in a Range': 'Ch∆∞∆°ng tr√¨nh Python in t·∫•t c·∫£ s·ªë l·∫ª trong kho·∫£ng',
            'Palindrome Program in Python': 'Ch∆∞∆°ng tr√¨nh ki·ªÉm tra s·ªë palindrome trong Python',
            'Python Program to Reverse a Number': 'Ch∆∞∆°ng tr√¨nh Python ƒë·∫£o ng∆∞·ª£c s·ªë',
            'Python Program to Print All Integers that Aren\'t Divisible by Either 2 or 3': 'Ch∆∞∆°ng tr√¨nh Python in s·ªë kh√¥ng chia h·∫øt cho 2 ho·∫∑c 3'
        }

        return translations[title] || title
    }

    /**
     * D·ªãch m√¥ t·∫£ sang ti·∫øng Vi·ªát
     */
    private translateDescription(description: string): string {
        if (!description) return 'Vi·∫øt ch∆∞∆°ng tr√¨nh Python ƒë·ªÉ gi·∫£i quy·∫øt b√†i to√°n ƒë∆∞·ª£c y√™u c·∫ßu.'

        const translations = {
            'Write a Python Program to check whether a given number is even or odd.': 'Vi·∫øt ch∆∞∆°ng tr√¨nh Python ki·ªÉm tra m·ªôt s·ªë cho tr∆∞·ªõc l√† ch·∫µn hay l·∫ª.',
            'Write a Python program to check whether a number is positive or negative.': 'Vi·∫øt ch∆∞∆°ng tr√¨nh Python ki·ªÉm tra m·ªôt s·ªë l√† d∆∞∆°ng hay √¢m.',
            'Write a Python program to print all odd numbers in a range.': 'Vi·∫øt ch∆∞∆°ng tr√¨nh Python in t·∫•t c·∫£ c√°c s·ªë l·∫ª trong m·ªôt kho·∫£ng cho tr∆∞·ªõc.',
            'Write a Python program to check if a number is a palindrome.': 'Vi·∫øt ch∆∞∆°ng tr√¨nh Python ki·ªÉm tra m·ªôt s·ªë c√≥ ph·∫£i l√† palindrome hay kh√¥ng.',
            'Write a Python program to reverse a number.': 'Vi·∫øt ch∆∞∆°ng tr√¨nh Python ƒë·∫£o ng∆∞·ª£c m·ªôt s·ªë.',
        }

        return translations[description] || description
    }

    /**
     * D·ªãch t√™n ph∆∞∆°ng ph√°p
     */
    private translateMethodName(methodName: string): string {
        const translations = {
            'Method 1': 'Ph∆∞∆°ng ph√°p s·ª≠ d·ª•ng to√°n t·ª≠ modulus',
            'Method 2': 'Ph∆∞∆°ng ph√°p s·ª≠ d·ª•ng to√°n t·ª≠ bitwise',
            'Method 3': 'Ph∆∞∆°ng ph√°p s·ª≠ d·ª•ng ƒë·ªá quy',
            'Method 4': 'Ph∆∞∆°ng ph√°p s·ª≠ d·ª•ng lambda function'
        }

        return translations[methodName] || methodName
    }

    /**
     * T·∫°o section test cases
     */
    private generateTestCasesSection(content: ProblemContent): string {
        // L·∫•y test cases t·ª´ methods ho·∫∑c t·ª´ content ch√≠nh
        let allTestCases: string[] = []

        // L·∫•y t·ª´ methods tr∆∞·ªõc
        content.methods.forEach(method => {
            allTestCases = allTestCases.concat(method.testCases)
        })

        // N·∫øu kh√¥ng c√≥, l·∫•y t·ª´ content ch√≠nh
        if (allTestCases.length === 0) {
            allTestCases = content.testCases || []
        }

        if (allTestCases.length === 0) {
            return `**V√≠ d·ª• test case:**
\`\`\`
Input: 4
Output: 4 is an even number.

Input: 7  
Output: 7 is an odd number.
\`\`\``
        }

        return allTestCases.map((testCase, index) => `
**Test Case ${index + 1}:**
\`\`\`
${testCase}
\`\`\`
`).join('')
    }

    /**
     * T·∫°o gi·∫£i th√≠ch test cases
     */
    private generateTestCasesExplanation(content: ProblemContent): string {
        return `ƒê·ªÉ hi·ªÉu r√µ b√†i t·∫≠p, h√£y c√πng ph√¢n t√≠ch c√°c test cases:

- **Test Case 1:** ƒê√¢y l√† m·ªôt v√≠ d·ª• minh h·ªça c√°ch ch∆∞∆°ng tr√¨nh ho·∫°t ƒë·ªông v·ªõi d·ªØ li·ªáu ƒë·∫ßu v√†o c·ª• th·ªÉ.
- **Test Case 2:** Cho th·∫•y c√°ch ch∆∞∆°ng tr√¨nh x·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√°c, gi√∫p b·∫°n hi·ªÉu r√µ logic c·ªßa b√†i to√°n.

**K·∫øt lu·∫≠n:** C√°c test cases n√†y gi√∫p b·∫°n hi·ªÉu r√µ logic c·ªßa b√†i to√°n v√† c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm tra t√≠nh ƒë√∫ng ƒë·∫Øn c·ªßa code.`
    }

    /**
     * Tr√≠ch xu·∫•t time complexity
     */
    private extractTimeComplexity(complexity: string): string {
        if (!complexity) return 'O(1)'

        const match = complexity.match(/Time Complexity:\s*([^.\n]+)/)
        if (match) {
            return match[1].trim()
        }

        if (complexity.includes('O(')) {
            const oMatch = complexity.match(/O\([^)]+\)/)
            return oMatch ? oMatch[0] : 'O(1)'
        }

        return 'O(1)'
    }

    /**
     * T·∫°o response theo template lesson
     */
    private generateLessonResponse(content: ProblemContent): string {
        const { BRAND_INFO } = require('../template/info-const')

        return `# ${content.title} - B√†i h·ªçc l·∫≠p tr√¨nh

## üìö Th√¥ng tin b√†i h·ªçc
- **Ch·ªß ƒë·ªÅ:** L·∫≠p tr√¨nh c∆° b·∫£n
- **Th·ªùi gian h·ªçc:** 30-45 ph√∫t
- **ƒê·ªô kh√≥:** D√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu
- **K·ªπ nƒÉng ƒë·∫°t ƒë∆∞·ª£c:** Hi·ªÉu v√† √°p d·ª•ng c√°c kh√°i ni·ªám l·∫≠p tr√¨nh c∆° b·∫£n

## üéØ M·ª•c ti√™u b√†i h·ªçc
Sau khi h·ªçc xong b√†i n√†y, b·∫°n s·∫Ω c√≥ th·ªÉ:
- Hi·ªÉu ƒë∆∞·ª£c c√°c kh√°i ni·ªám l·∫≠p tr√¨nh c∆° b·∫£n ƒë∆∞·ª£c tr√¨nh b√†y
- V·∫≠n d·ª•ng ki·∫øn th·ª©c v√†o vi·ªác gi·∫£i quy·∫øt c√°c b√†i to√°n th·ª±c t·∫ø
- Ph√°t tri·ªÉn t∆∞ duy logic v√† k·ªπ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ
- Vi·∫øt code ƒë∆°n gi·∫£n v√† hi·ªáu qu·∫£

## üìã Ki·∫øn th·ª©c c·∫ßn c√≥ tr∆∞·ªõc
- Hi·ªÉu bi·∫øt c∆° b·∫£n v·ªÅ m√°y t√≠nh
- ƒê√£ c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng l·∫≠p tr√¨nh Python
- Bi·∫øt c√°ch ch·∫°y ch∆∞∆°ng tr√¨nh Python ƒë∆°n gi·∫£n

## üåü Gi·ªõi thi·ªáu ch·ªß ƒë·ªÅ
${content.description}

Trong b√†i h·ªçc n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°c k·ªπ thu·∫≠t l·∫≠p tr√¨nh quan tr·ªçng th√¥ng qua c√°c v√≠ d·ª• th·ª±c t·∫ø v√† d·ªÖ hi·ªÉu.

## üìñ N·ªôi dung l√Ω thuy·∫øt

${content.methods.map((method, index) => `
### ${index + 1}. ${method.name}
**Kh√°i ni·ªám:** ${method.description}

**V√≠ d·ª• minh h·ªça:**
\`\`\`python
${method.sourceCode}
\`\`\`

**Gi·∫£i th√≠ch chi ti·∫øt:**
${method.explanation || 'ƒê√¢y l√† m·ªôt k·ªπ thu·∫≠t quan tr·ªçng trong l·∫≠p tr√¨nh, gi√∫p gi·∫£i quy·∫øt b√†i to√°n m·ªôt c√°ch hi·ªáu qu·∫£.'}

**·ª®ng d·ª•ng th·ª±c t·∫ø:**
- S·ª≠ d·ª•ng trong c√°c b√†i to√°n t∆∞∆°ng t·ª±
- C√≥ th·ªÉ m·ªü r·ªông cho c√°c tr∆∞·ªùng h·ª£p ph·ª©c t·∫°p h∆°n
- L√† n·ªÅn t·∫£ng cho c√°c k·ªπ thu·∫≠t n√¢ng cao
`).join('\n')}

## üõ†Ô∏è Th·ª±c h√†nh

### B√†i t·∫≠p th·ª±c h√†nh
**Y√™u c·∫ßu:** √Åp d·ª•ng ki·∫øn th·ª©c ƒë√£ h·ªçc ƒë·ªÉ th·ª±c h√†nh

**H∆∞·ªõng d·∫´n th·ª±c hi·ªán:**
1. ƒê·ªçc hi·ªÉu code m·∫´u m·ªôt c√°ch k·ªπ l∆∞·ª°ng
2. Ch·∫°y th·ª≠ v·ªõi c√°c test cases ƒë∆∞·ª£c cung c·∫•p
3. Th·ª≠ nghi·ªám v·ªõi d·ªØ li·ªáu kh√°c nhau
4. T·ª± t·∫°o th√™m test cases ƒë·ªÉ ki·ªÉm tra

## üß™ Test Cases ƒë·ªÉ th·ª±c h√†nh
${content.testCases.map((testCase, index) => `
**Test Case ${index + 1}:**
\`\`\`
${testCase}
\`\`\`
`).join('')}

## üí° M·∫πo v√† Kinh nghi·ªám
- **Lu√¥n test code:** Ki·ªÉm tra v·ªõi nhi·ªÅu tr∆∞·ªùng h·ª£p kh√°c nhau tr∆∞·ªõc khi ho√†n th√†nh
- **Vi·∫øt comment:** Th√™m ghi ch√∫ ƒë·ªÉ code d·ªÖ hi·ªÉu v√† b·∫£o tr√¨
- **T·ªëi ∆∞u t·ª´ t·ª´:** Vi·∫øt code ch·∫°y ƒë√∫ng tr∆∞·ªõc, sau ƒë√≥ m·ªõi t·ªëi ∆∞u h√≥a
- **H·ªçc t·ª´ l·ªói:** M·ªói l·ªói l√† m·ªôt c∆° h·ªôi h·ªçc h·ªèi qu√Ω gi√°

## üìù T√≥m t·∫Øt b√†i h·ªçc
B√†i h·ªçc n√†y ƒë√£ gi·ªõi thi·ªáu c√°c kh√°i ni·ªám quan tr·ªçng trong l·∫≠p tr√¨nh. Nh·ªØng ki·∫øn th·ª©c n√†y s·∫Ω l√† n·ªÅn t·∫£ng v·ªØng ch·∫Øc cho vi·ªác h·ªçc c√°c ch·ªß ƒë·ªÅ n√¢ng cao h∆°n.

**ƒêi·ªÉm ch√≠nh c·∫ßn nh·ªõ:**
- Hi·ªÉu r√µ logic tr∆∞·ªõc khi vi·∫øt code
- Th·ª±c h√†nh th∆∞·ªùng xuy√™n ƒë·ªÉ n·∫Øm v·ªØng ki·∫øn th·ª©c
- Kh√¥ng ng·∫°i th·ª≠ nghi·ªám v√† m·∫Øc l·ªói

## üöÄ B∆∞·ªõc ti·∫øp theo
- Th·ª±c h√†nh th√™m v·ªõi c√°c b√†i t·∫≠p t∆∞∆°ng t·ª±
- T√¨m hi·ªÉu c√°c k·ªπ thu·∫≠t l·∫≠p tr√¨nh n√¢ng cao
- √Åp d·ª•ng ki·∫øn th·ª©c v√†o c√°c d·ª± √°n th·ª±c t·∫ø
- Tham gia c·ªông ƒë·ªìng l·∫≠p tr√¨nh ƒë·ªÉ h·ªçc h·ªèi

## üìö T√†i li·ªáu tham kh·∫£o th√™m
- [H∆∞·ªõng d·∫´n Python ch√≠nh th·ª©c](https://docs.python.org/3/tutorial/)
- [Kh√≥a h·ªçc l·∫≠p tr√¨nh mi·ªÖn ph√≠](https://www.codecademy.com/)
- [C·ªông ƒë·ªìng l·∫≠p tr√¨nh Vi·ªát Nam](https://viblo.asia/)
- [Th·ª±c h√†nh l·∫≠p tr√¨nh online](https://www.hackerrank.com/)

---
${BRAND_INFO}`
    }

    /**
     * T·∫°o response cho raw content
     */
    private generateRawResponse(content: ProblemContent): string {
        return `# ${content.title}

## Th√¥ng tin g·ªëc
**Ti√™u ƒë·ªÅ:** ${content.title}
**M√¥ t·∫£:** ${content.description}
**URL:** ${content.url}

## N·ªôi dung ƒë√£ chuy·ªÉn ƒë·ªïi
ƒê√¢y l√† n·ªôi dung ƒë∆∞·ª£c AI chuy·ªÉn ƒë·ªïi sang ti·∫øng Vi·ªát v·ªõi ƒë·ªãnh d·∫°ng markdown chu·∫©n.

## C√°c ph∆∞∆°ng ph√°p gi·∫£i
${content.methods.map((method, index) => `
### Ph∆∞∆°ng ph√°p ${index + 1}: ${method.name}
**M√¥ t·∫£:** ${method.description}

\`\`\`python
${method.sourceCode}
\`\`\`

**Gi·∫£i th√≠ch:** ${method.explanation}
**ƒê·ªô ph·ª©c t·∫°p:** ${method.complexity}
`).join('\n')}

## Test Cases
${content.testCases.map((testCase, index) => `
**Test ${index + 1}:**
\`\`\`
${testCase}
\`\`\`
`).join('\n')}

---
*ƒê∆∞·ª£c x·ª≠ l√Ω b·ªüi AI Assistant - ${new Date().toLocaleString('vi-VN')}*`
    }

    /**
     * T·∫°o mock stream cho development
     */
    private createMockStream(content: ProblemContent, options: AIProcessingOptions): any {
        // T·∫°o response d·ª±a tr√™n template type
        let responseText: string
        switch (options.templateType) {
            case 'exercise':
                responseText = this.generateExerciseResponse(content)
                break
            case 'lesson':
                responseText = this.generateLessonResponse(content)
                break
            default:
                responseText = this.generateRawResponse(content)
                break
        }

        // T·∫°o mock stream t·ª´ response text
        const chunks = responseText.split('\n')
        let currentIndex = 0

        return {
            getReader: () => ({
                read: async () => {
                    if (currentIndex >= chunks.length) {
                        return { done: true, value: undefined }
                    }

                    const chunk = chunks[currentIndex] + '\n'
                    currentIndex++

                    // Simulate streaming delay
                    await new Promise(resolve => setTimeout(resolve, 50))

                    return {
                        done: false,
                        value: new TextEncoder().encode(chunk)
                    }
                }
            })
        }
    }
}

// Export singleton instance
export const aiActions = new ChatAIActions() 