import { DEFAULT_AI_CONFIG, TemplateType } from '../info-const'
import type { ProblemContent } from '../../scraper'
import { ExerciseTemplate } from '../template/exercise'
import { LessonTemplate } from '../template/lesson'

export interface AIResponse {
    success: boolean
    data?: string
    error?: string
    processingTime?: number
}

export interface AIOptions {
    templateType: TemplateType
    useAI: boolean
    apiKey?: string
}

export class ChatAIActions {
    private apiKey: string = ''

    constructor(apiKey?: string) {
        this.apiKey = apiKey || DEFAULT_AI_CONFIG.apiKey
    }

    setApiKey(apiKey: string): void {
        this.apiKey = apiKey
    }

    async processContent(content: ProblemContent, options: AIOptions): Promise<AIResponse> {
        const startTime = Date.now()

        try {
            console.log(`ü§ñ Processing: ${content.title}`)
            console.log(`üìã Template: ${options.templateType}, AI: ${options.useAI}`)

            let result: string

            if (options.useAI && this.apiKey) {
                // Real AI processing
                result = await this.callMistralAPI(content, options.templateType)
            } else {
                // Fallback to template-only
                result = this.generateTemplateOnly(content, options.templateType)
            }

            const processingTime = Date.now() - startTime
            console.log(`‚úÖ Completed in ${processingTime}ms`)

            return {
                success: true,
                data: result,
                processingTime
            }

        } catch (error) {
            const processingTime = Date.now() - startTime
            console.error(`‚ùå Processing error:`, error)

            return {
                success: false,
                error: error.message || 'L·ªói x·ª≠ l√Ω kh√¥ng x√°c ƒë·ªãnh',
                processingTime
            }
        }
    }

    private async callMistralAPI(content: ProblemContent, templateType: TemplateType): Promise<string> {
        const prompt = this.generatePrompt(content, templateType)

        const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${this.apiKey}`
            },
            body: JSON.stringify({
                model: DEFAULT_AI_CONFIG.model,
                messages: [{
                    role: 'user',
                    content: prompt
                }],
                temperature: DEFAULT_AI_CONFIG.temperature,
                max_tokens: DEFAULT_AI_CONFIG.maxTokens
            })
        })

        if (!response.ok) {
            throw new Error(`Mistral API error: ${response.status} ${response.statusText}`)
        }

        const data = await response.json()

        if (!data.choices || !data.choices[0]) {
            throw new Error('Invalid response from Mistral API')
        }

        return data.choices[0].message.content
    }

    private generatePrompt(content: ProblemContent, templateType: TemplateType): string {
        switch (templateType) {
            case 'exercise':
                return ExerciseTemplate.generatePrompt(content)
            case 'lesson':
                return LessonTemplate.generatePrompt(content)
            case 'raw':
                return this.generateRawPrompt(content)
            default:
                throw new Error(`Unknown template type: ${templateType}`)
        }
    }

    private generateRawPrompt(content: ProblemContent): string {
        return `Chuy·ªÉn ƒë·ªïi n·ªôi dung sau sang ti·∫øng Vi·ªát, gi·ªØ nguy√™n test cases:

Title: ${content.title}
Description: ${content.description}

Code:
${content.methods.map(m => m.sourceCode).join('\n\n')}

Test Cases:
${content.testCases.join('\n')}

Y√™u c·∫ßu: D·ªãch ti·∫øng Vi·ªát t·ª± nhi√™n, format markdown, gi·ªØ nguy√™n code v√† test cases.`
    }

    private generateTemplateOnly(content: ProblemContent, templateType: TemplateType): string {
        // Simple template without AI
        const vietnameseTitle = this.translateTitle(content.title)

        switch (templateType) {
            case 'exercise':
                return this.generateSimpleExercise(content, vietnameseTitle)
            case 'lesson':
                return this.generateSimpleLesson(content, vietnameseTitle)
            default:
                return this.generateSimpleRaw(content, vietnameseTitle)
        }
    }

    private generateSimpleExercise(content: ProblemContent, title: string): string {
        return `# ${title}

## üìù ƒê·ªÅ b√†i
${content.description}

## üß™ Test Cases
\`\`\`
${content.testCases.join('\n')}
\`\`\`

## üíª L·ªùi gi·∫£i
\`\`\`python
${content.methods[0]?.sourceCode || '# Code here'}
\`\`\`

**Gi·∫£i th√≠ch:** Ch∆∞∆°ng tr√¨nh n√†y gi·∫£i quy·∫øt b√†i to√°n b·∫±ng c√°ch x·ª≠ l√Ω input v√† tr·∫£ v·ªÅ output theo y√™u c·∫ßu.

---
T√°c gi·∫£: Nguy·ªÖn Ph∆∞∆°ng Anh T√∫  
Facebook: https://www.facebook.com/dev.alex.698447`
    }

    private generateSimpleLesson(content: ProblemContent, title: string): string {
        return `# ${title}

## üìö Gi·ªõi thi·ªáu
${content.description}

## üéØ M·ª•c ti√™u
- Hi·ªÉu ƒë∆∞·ª£c kh√°i ni·ªám c∆° b·∫£n
- √Åp d·ª•ng v√†o b√†i t·∫≠p th·ª±c t·∫ø

## üìñ N·ªôi dung

### Kh√°i ni·ªám ch√≠nh
${content.methods[0]?.description || 'N·ªôi dung b√†i h·ªçc'}

\`\`\`python
${content.methods[0]?.sourceCode || '# Code example'}
\`\`\`

## üõ†Ô∏è Th·ª±c h√†nh
Th·ª±c h√†nh v·ªõi c√°c test cases sau:
\`\`\`
${content.testCases.join('\n')}
\`\`\`

---
T√°c gi·∫£: Nguy·ªÖn Ph∆∞∆°ng Anh T√∫  
Facebook: https://www.facebook.com/dev.alex.698447`
    }

    private generateSimpleRaw(content: ProblemContent, title: string): string {
        return `# ${title}

**M√¥ t·∫£:** ${content.description}

**Code:**
\`\`\`python
${content.methods.map(m => m.sourceCode).join('\n\n')}
\`\`\`

**Test Cases:**
\`\`\`
${content.testCases.join('\n')}
\`\`\`

---
T√°c gi·∫£: Nguy·ªÖn Ph∆∞∆°ng Anh T√∫`
    }

    private translateTitle(title: string): string {
        // Simple title translation
        const translations = {
            'Python Program to Check if a Number is Odd or Even': 'Ki·ªÉm tra s·ªë ch·∫µn l·∫ª',
            'Python Program to Check Whether a Number is Positive or Negative': 'Ki·ªÉm tra s·ªë d∆∞∆°ng √¢m',
            'Python Program to Print All Odd Numbers in a Range': 'In c√°c s·ªë l·∫ª trong kho·∫£ng',
            'Palindrome Program in Python': 'Ki·ªÉm tra s·ªë palindrome',
            'Python Program to Reverse a Number': 'ƒê·∫£o ng∆∞·ª£c s·ªë'
        }

        return translations[title] || title.replace(/Python Program to/gi, '').trim()
    }
}

export const aiActions = new ChatAIActions() 