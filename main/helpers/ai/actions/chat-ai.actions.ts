import { DEFAULT_AI_CONFIG, AI_PROCESSING_POLICIES, ProcessingPolicy, TemplateType } from '../template/info-const'
import type { ProblemContent } from '../../scraper'
import { ExerciseTemplateProcessor } from '../template/exercise'
import { LessonTemplateProcessor } from '../template/lesson'

// Note: Requires npm install ai @ai-sdk/mistral
// Uncomment when AI SDK is installed:
// import { streamText, generateText } from 'ai'
// import { mistral } from '@ai-sdk/mistral'
// import { createStreamableValue } from 'ai/rsc'

export interface Message {
    role: 'user' | 'assistant'
    content: string
    timestamp: Date
}

export interface AIConfig {
    provider: 'mistral' | 'openai' | 'claude'
    apiKey: string
    model: string
    temperature: number
    maxTokens: number
}

export interface AIProcessingOptions {
    templateType: TemplateType | 'raw'
    useStream: boolean
    policy: ProcessingPolicy
    customPrompt?: string
}

export interface AIResponse {
    success: boolean
    data?: string
    error?: string
    rawResponse?: string
    processingTime?: number
    metadata?: any
}

export interface StreamResponse {
    success: boolean
    stream?: any // ReadableStream<string> when AI SDK is available
    error?: string
}

export class ChatAIActions {
    private config: AIConfig

    constructor(config?: Partial<AIConfig>) {
        this.config = { ...DEFAULT_AI_CONFIG, ...config }
    }

    updateConfig(newConfig: Partial<AIConfig>): void {
        this.config = { ...this.config, ...newConfig }
    }

    /**
     * X·ª≠ l√Ω content v·ªõi AI (no-stream mode - m·∫∑c ƒë·ªãnh)
     * D·ª±a tr√™n pattern t·ª´ continueConversation function
     */
    async processContent(
        content: ProblemContent,
        options: AIProcessingOptions
    ): Promise<AIResponse> {
        const startTime = Date.now()

        try {
            // Validate API key - allow default key for demo
            if (!this.config.apiKey) {
                return {
                    success: false,
                    error: 'Vui l√≤ng c·∫•u h√¨nh API key trong settings'
                }
            }

            const policyConfig = AI_PROCESSING_POLICIES[options.policy]
            let prompt: string

            // T·∫°o prompt theo template
            switch (options.templateType) {
                case 'exercise':
                    prompt = ExerciseTemplateProcessor.generatePrompt(content)
                    break
                case 'lesson':
                    prompt = LessonTemplateProcessor.generatePrompt(content)
                    break
                case 'raw':
                    prompt = options.customPrompt || this.generateRawPrompt(content)
                    break
                default:
                    throw new Error('Invalid template type')
            }

            // TODO: Uncomment when AI SDK is installed
            /*
            console.log('Processing with API key:', this.config.apiKey)
            process.env.MISTRAL_API_KEY = this.config.apiKey

            const { text } = await generateText({
                model: mistral(policyConfig.model),
                system: `B·∫°n l√† chuy√™n gia gi√°o d·ª•c l·∫≠p tr√¨nh Python. H√£y chuy·ªÉn ƒë·ªïi n·ªôi dung theo y√™u c·∫ßu:
- D·ªãch sang ti·∫øng Vi·ªát t·ª± nhi√™n
- Gi·ªØ nguy√™n 100% test cases g·ªëc
- C·∫•u tr√∫c markdown chu·∫©n
- Gi·∫£i th√≠ch chi ti·∫øt d·ªÖ hi·ªÉu
- Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi h·ªçc`,
                prompt: prompt,
                maxTokens: policyConfig.maxTokens,
                temperature: policyConfig.temperature,
            })

            // Validate output
            let isValid = false
            let metadata = {}

            if (options.templateType === 'exercise') {
                isValid = ExerciseTemplateProcessor.validateOutput(text)
                if (isValid) {
                    metadata = ExerciseTemplateProcessor.extractMetadata(text)
                }
            } else if (options.templateType === 'lesson') {
                isValid = LessonTemplateProcessor.validateOutput(text)
                if (isValid) {
                    metadata = LessonTemplateProcessor.extractMetadata(text)
                }
            } else {
                isValid = text.length > 100 // Basic validation for raw
            }

            if (!isValid) {
                return {
                    success: false,
                    error: 'AI output kh√¥ng ƒë√∫ng format y√™u c·∫ßu',
                    rawResponse: text,
                    processingTime: Date.now() - startTime
                }
            }

            return {
                success: true,
                data: text,
                rawResponse: text,
                processingTime: Date.now() - startTime,
                metadata
            }
            */

            // Mock response for development (remove when AI SDK is installed)
            console.log('üß™ Generating mock AI response...')
            console.log('üìã Content title:', content.title)
            console.log('üéØ Template type:', options.templateType)
            console.log('‚öôÔ∏è Policy:', options.policy)

            const mockData = this.generateMockResponse(content, options)
            console.log('‚úÖ Mock response generated, length:', mockData.length)

            return {
                success: true,
                data: mockData,
                rawResponse: mockData,
                processingTime: Date.now() - startTime,
                metadata: { mock: true, template: options.templateType, policy: options.policy }
            }

        } catch (error) {
            return {
                success: false,
                error: error.message || 'L·ªói x·ª≠ l√Ω AI kh√¥ng x√°c ƒë·ªãnh',
                processingTime: Date.now() - startTime
            }
        }
    }

    /**
     * X·ª≠ l√Ω content v·ªõi AI (stream mode)
     * D·ª±a tr√™n pattern t·ª´ continueConversation function
     */
    async processContentStream(
        content: ProblemContent,
        options: AIProcessingOptions
    ): Promise<StreamResponse> {
        try {
            // Validate API key - allow default key for demo
            if (!this.config.apiKey) {
                return {
                    success: false,
                    error: 'Vui l√≤ng c·∫•u h√¨nh API key trong settings'
                }
            }

            const policyConfig = AI_PROCESSING_POLICIES[options.policy]
            let prompt: string

            // T·∫°o prompt theo template
            switch (options.templateType) {
                case 'exercise':
                    prompt = ExerciseTemplateProcessor.generatePrompt(content)
                    break
                case 'lesson':
                    prompt = LessonTemplateProcessor.generatePrompt(content)
                    break
                case 'raw':
                    prompt = options.customPrompt || this.generateRawPrompt(content)
                    break
                default:
                    throw new Error('Invalid template type')
            }

            // TODO: Uncomment when AI SDK is installed
            /*
            console.log('Processing stream with API key:', this.config.apiKey)
            process.env.MISTRAL_API_KEY = this.config.apiKey

            const stream = createStreamableValue()

            // Format history for AI (similar to continueConversation)
            const messages = [
                {
                    role: 'user' as const,
                    content: this.formatPromptForAI(prompt)
                }
            ]

            // Start streaming
            ;(async () => {
                const { textStream } = await streamText({
                    model: mistral(policyConfig.model),
                    system: `B·∫°n l√† chuy√™n gia gi√°o d·ª•c l·∫≠p tr√¨nh Python. H√£y chuy·ªÉn ƒë·ªïi n·ªôi dung theo y√™u c·∫ßu:
- D·ªãch sang ti·∫øng Vi·ªát t·ª± nhi√™n
- Gi·ªØ nguy√™n 100% test cases g·ªëc  
- C·∫•u tr√∫c markdown chu·∫©n
- Gi·∫£i th√≠ch chi ti·∫øt d·ªÖ hi·ªÉu
- Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi h·ªçc`,
                    messages: messages,
                    maxTokens: policyConfig.maxTokens,
                    temperature: policyConfig.temperature,
                })

                for await (const text of textStream) {
                    stream.update(text)
                }

                stream.done()
            })()

            return {
                success: true,
                stream: stream.value
            }
            */

            // Mock stream for development (remove when AI SDK is installed)
            const mockStream = this.createMockStream(content, options)

            return {
                success: true,
                stream: mockStream
            }

        } catch (error) {
            return {
                success: false,
                error: error.message || 'L·ªói x·ª≠ l√Ω AI stream kh√¥ng x√°c ƒë·ªãnh'
            }
        }
    }

    /**
     * T·∫°o prompt raw ƒë∆°n gi·∫£n
     */
    private generateRawPrompt(content: ProblemContent): string {
        return `
H√£y chuy·ªÉn ƒë·ªïi n·ªôi dung b√†i t·∫≠p l·∫≠p tr√¨nh sau sang ti·∫øng Vi·ªát v·ªõi format markdown chu·∫©n:

Ti√™u ƒë·ªÅ: ${content.title}
M√¥ t·∫£: ${content.description}

Solutions:
${content.solutions.map((sol, i) => `Solution ${i + 1}:\n${sol}`).join('\n\n')}

Test Cases:
${content.testCases.join('\n')}

Y√™u c·∫ßu:
- D·ªãch sang ti·∫øng Vi·ªát t·ª± nhi√™n
- Gi·ªØ nguy√™n 100% test cases
- Th√™m comment ti·∫øng Vi·ªát v√†o code
- C·∫•u tr√∫c markdown r√µ r√†ng
- Gi·∫£i th√≠ch chi ti·∫øt
        `
    }

    /**
     * Format prompt for AI (similar to formatUserMessage)
     */
    private formatPromptForAI(content: string): string {
        return `[CONTENT_CONVERSION_REQUEST]\n${content}\n[/CONTENT_CONVERSION_REQUEST]`
    }

    /**
     * T·∫°o mock response cho development
     */
    private generateMockResponse(content: ProblemContent, options: AIProcessingOptions): string {
        const templateConfig = options.templateType !== 'raw' ?
            require('../template/info-const').TEMPLATE_CONFIGS[options.templateType] : null

        switch (options.templateType) {
            case 'exercise':
                return `# ${content.title} - B√†i t·∫≠p l·∫≠p tr√¨nh Python

## üìã Th√¥ng tin b√†i t·∫≠p
- **ƒê·ªô kh√≥:** Trung b√¨nh
- **Th·ªùi gian:** 30 ph√∫t
- **Ki·∫øn th·ª©c:** Python c∆° b·∫£n, thu·∫≠t to√°n
- **Tags:** python, algorithm, programming

## üéØ M√¥ t·∫£ b√†i to√°n
${content.description}

*ƒê√¢y l√† b√†i t·∫≠p ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát v·ªõi c·∫•u tr√∫c r√µ r√†ng, d·ªÖ hi·ªÉu cho ng∆∞·ªùi h·ªçc.*

## üí° Ph√¢n t√≠ch
B√†i to√°n n√†y y√™u c·∫ßu ch√∫ng ta hi·ªÉu v√† √°p d·ª•ng c√°c kh√°i ni·ªám c∆° b·∫£n c·ªßa l·∫≠p tr√¨nh Python.

## üîß C√°c ph∆∞∆°ng ph√°p gi·∫£i

${content.methods.map((method, index) => `
### Ph∆∞∆°ng ph√°p ${index + 1}: ${method.name}
**√ù t∆∞·ªüng:** ${method.description}

**Code:**
\`\`\`python
# ${method.name} - Gi·∫£i ph√°p ƒë∆∞·ª£c t·ªëi ∆∞u
${method.sourceCode}
\`\`\`

**Gi·∫£i th√≠ch:**
${method.explanation}

**ƒê·ªô ph·ª©c t·∫°p:**
- Th·ªùi gian: O(n)
- Kh√¥ng gian: O(1)
`).join('\n')}

## üß™ Test Cases
${content.testCases.map((testCase, index) => `
**Test Case ${index + 1}:**
\`\`\`
${testCase}
\`\`\`
`).join('\n')}

## ü§î B√†i t·∫≠p m·ªü r·ªông
1. H√£y th·ª≠ t·ªëi ∆∞u h√≥a thu·∫≠t to√°n ƒë·ªÉ c√≥ ƒë·ªô ph·ª©c t·∫°p th·ªùi gian t·ªët h∆°n
2. Vi·∫øt th√™m test cases ƒë·ªÉ ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
3. C√†i ƒë·∫∑t ph∆∞∆°ng ph√°p kh√°c ƒë·ªÉ gi·∫£i quy·∫øt b√†i to√°n

## üìö T√†i li·ªáu tham kh·∫£o
- [Python Documentation](https://docs.python.org/)
- [Algorithm Design Techniques](https://example.com)

---
*B√†i t·∫≠p ƒë∆∞·ª£c t·∫°o b·ªüi AI Assistant - ${new Date().toLocaleString('vi-VN')}*`

            case 'lesson':
                return `# ${content.title} - B√†i h·ªçc l·∫≠p tr√¨nh Python

## üìö Th√¥ng tin b√†i h·ªçc
- **Ch∆∞∆°ng:** Python Programming Fundamentals
- **B√†i:** 1
- **Th·ªùi gian:** 45 ph√∫t
- **ƒê·ªô kh√≥:** Trung b√¨nh

## üéØ M·ª•c ti√™u b√†i h·ªçc
Sau khi h·ªçc xong b√†i n√†y, b·∫°n s·∫Ω:
- Hi·ªÉu ƒë∆∞·ª£c c√°c kh√°i ni·ªám c∆° b·∫£n ƒë∆∞·ª£c tr√¨nh b√†y
- V·∫≠n d·ª•ng ƒë∆∞·ª£c ki·∫øn th·ª©c v√†o th·ª±c t·∫ø
- Ph√°t tri·ªÉn t∆∞ duy l·∫≠p tr√¨nh logic

## üìã Ki·∫øn th·ª©c c·∫ßn c√≥
- Python c∆° b·∫£n
- Hi·ªÉu v·ªÅ bi·∫øn v√† h√†m

## üåü Gi·ªõi thi·ªáu
${content.description}

Trong b√†i h·ªçc n√†y, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°c k·ªπ thu·∫≠t l·∫≠p tr√¨nh quan tr·ªçng th√¥ng qua v√≠ d·ª• th·ª±c t·∫ø.

## üìñ L√Ω thuy·∫øt

${content.methods.map((method, index) => `
### ${method.name}
${method.description}

**V√≠ d·ª• minh h·ªça:**
\`\`\`python
# ${method.name} - V√≠ d·ª• th·ª±c t·∫ø
${method.sourceCode}
\`\`\`

**Gi·∫£i th√≠ch:**
${method.explanation}
`).join('\n')}

## üõ†Ô∏è Th·ª±c h√†nh

### B√†i t·∫≠p 1: √Åp d·ª•ng ki·∫øn th·ª©c
**Y√™u c·∫ßu:** Th·ª±c h√†nh v·ªõi c√°c v√≠ d·ª• ƒë√£ h·ªçc

**H∆∞·ªõng d·∫´n:**
1. ƒê·ªçc hi·ªÉu code m·∫´u
2. Ch·∫°y th·ª≠ v·ªõi test cases
3. Th·ª≠ bi·∫øn ƒë·ªïi v√† c·∫£i ti·∫øn

## üß™ Test Cases
${content.testCases.map((testCase, index) => `
**Test Case ${index + 1}:**
\`\`\`
${testCase}
\`\`\`
`).join('\n')}

## üí° Tips v√† Tricks
- Lu√¥n test code v·ªõi nhi·ªÅu tr∆∞·ªùng h·ª£p kh√°c nhau
- Vi·∫øt comment ƒë·ªÉ code d·ªÖ hi·ªÉu
- T·ªëi ∆∞u h√≥a sau khi code ƒë√£ ch·∫°y ƒë√∫ng

## üìù T√≥m t·∫Øt
B√†i h·ªçc n√†y ƒë√£ gi·ªõi thi·ªáu c√°c kh√°i ni·ªám quan tr·ªçng trong l·∫≠p tr√¨nh Python. H√£y th·ª±c h√†nh nhi·ªÅu ƒë·ªÉ n·∫Øm v·ªØng ki·∫øn th·ª©c.

## üöÄ B∆∞·ªõc ti·∫øp theo
- Th·ª±c h√†nh th√™m v·ªõi c√°c b√†i t·∫≠p t∆∞∆°ng t·ª±
- T√¨m hi·ªÉu c√°c k·ªπ thu·∫≠t n√¢ng cao
- √Åp d·ª•ng v√†o d·ª± √°n th·ª±c t·∫ø

## üìö T√†i li·ªáu tham kh·∫£o
- [Python Tutorial](https://docs.python.org/3/tutorial/)
- [Programming Best Practices](https://example.com)

---
*B√†i h·ªçc ƒë∆∞·ª£c t·∫°o b·ªüi AI Assistant - ${new Date().toLocaleString('vi-VN')}*`

            default:
                return `# N·ªôi dung ƒë∆∞·ª£c AI x·ª≠ l√Ω

## Th√¥ng tin g·ªëc
**Ti√™u ƒë·ªÅ:** ${content.title}
**M√¥ t·∫£:** ${content.description}

## N·ªôi dung ƒë√£ chuy·ªÉn ƒë·ªïi
ƒê√¢y l√† n·ªôi dung ƒë∆∞·ª£c AI chuy·ªÉn ƒë·ªïi sang ti·∫øng Vi·ªát v·ªõi format markdown chu·∫©n.

## Code Examples
${content.solutions.map((solution, index) => `
### V√≠ d·ª• ${index + 1}
\`\`\`python
${solution}
\`\`\`
`).join('\n')}

## Test Cases
${content.testCases.map((testCase, index) => `
**Test ${index + 1}:**
\`\`\`
${testCase}
\`\`\`
`).join('\n')}

---
*ƒê∆∞·ª£c x·ª≠ l√Ω b·ªüi AI Assistant*`
        }
    }

    /**
     * T·∫°o mock stream cho development
     */
    private createMockStream(content: ProblemContent, options: AIProcessingOptions): any {
        const mockResponse = this.generateMockResponse(content, options)
        const chunks = mockResponse.match(/.{1,100}/g) || [mockResponse]

        let index = 0

        // Simple mock stream object
        return {
            value: {
                subscribe: (callback: (chunk: string) => void) => {
                    const interval = setInterval(() => {
                        if (index < chunks.length) {
                            callback(chunks[index])
                            index++
                        } else {
                            clearInterval(interval)
                        }
                    }, 200) // Emit chunk every 200ms
                }
            }
        }
    }
}

// Export singleton instance
export const aiActions = new ChatAIActions() 