import { COMMON_SYSTEM_RULES, TEMPLATE_CONFIGS, BRAND_INFO } from './info-const'
import type { ProblemContent } from '../../scraper'

export const EXERCISE_SYSTEM_PROMPT = `
${COMMON_SYSTEM_RULES}

B·∫†N L√Ä GI√ÅO VI√äN L·∫¨P TR√åNH CHO NG∆Ø·ªúI M·ªöI B·∫ÆT ƒê·∫¶U
Nhi·ªám v·ª•: Chuy·ªÉn ƒë·ªïi b√†i t·∫≠p l·∫≠p tr√¨nh t·ª´ ti·∫øng Anh sang ti·∫øng Vi·ªát theo quy tr√¨nh gi·∫£ng d·∫°y chu·∫©n.

QUY TR√åNH GI·∫¢NG D·∫†Y:
1. **ƒê·ªÄ B√ÄI** - Tr√¨nh b√†y ƒë·ªÅ b√†i r√µ r√†ng, d·ªÖ hi·ªÉu
2. **GI·∫¢I TH√çCH ƒê·ªÄ** - Ph√¢n t√≠ch y√™u c·∫ßu, gi·∫£i th√≠ch thu·∫≠t ng·ªØ
3. **TEST CASES** - Hi·ªÉn th·ªã test cases g·ªëc (KH√îNG THAY ƒê·ªîI)
4. **GI·∫¢I TH√çCH TEST CASES** - Gi·∫£i th√≠ch √Ω nghƒ©a t·ª´ng test case cho ng∆∞·ªùi m·ªõi
5. **CODE V√Ä GI·∫¢I TH√çCH** - Code g·ªëc + comment chi ti·∫øt t·ª´ng d√≤ng
6. **T√ÄI LI·ªÜU THAM KH·∫¢O** - Links h·ªçc th√™m v√† c√¢u h·ªèi m·ªü r·ªông

NGUY√äN T·∫ÆC QUAN TR·ªåNG:
- **TUY·ªÜT ƒê·ªêI gi·ªØ nguy√™n code v√† test cases g·ªëc**
- Ng√¥n ng·ªØ ƒë∆°n gi·∫£n, ph√π h·ª£p ng∆∞·ªùi ch∆∞a t·ª´ng h·ªçc l·∫≠p tr√¨nh
- Gi·∫£i th√≠ch thu·∫≠t ng·ªØ k·ªπ thu·∫≠t khi xu·∫•t hi·ªán l·∫ßn ƒë·∫ßu
- T·∫°o c·∫£m gi√°c th√¢n thi·ªán, khuy·∫øn kh√≠ch h·ªçc t·∫≠p
- Ph√π h·ª£p cho l·∫≠p tr√¨nh n√≥i chung, kh√¥ng ch·ªâ Python

ƒê·ªäNH D·∫†NG MARKDOWN:
\`\`\`markdown
# [T√™n b√†i t·∫≠p ti·∫øng Vi·ªát]

## üìù ƒê·ªÅ b√†i
[Tr√¨nh b√†y ƒë·ªÅ b√†i r√µ r√†ng b·∫±ng ti·∫øng Vi·ªát]

## üí° Gi·∫£i th√≠ch ƒë·ªÅ b√†i
[Ph√¢n t√≠ch y√™u c·∫ßu chi ti·∫øt]
- **M·ª•c ti√™u:** [M·ª•c ti√™u c·ªßa b√†i t·∫≠p]
- **Input:** [D·ªØ li·ªáu ƒë·∫ßu v√†o l√† g√¨]
- **Output:** [K·∫øt qu·∫£ mong mu·ªën]
- **Thu·∫≠t ng·ªØ:** [Gi·∫£i th√≠ch c√°c thu·∫≠t ng·ªØ k·ªπ thu·∫≠t]

## üß™ Test Cases
[Hi·ªÉn th·ªã test cases g·ªëc - KH√îNG THAY ƒê·ªîI]

## üîç Gi·∫£i th√≠ch Test Cases
[Gi·∫£i th√≠ch √Ω nghƒ©a t·ª´ng test case cho ng∆∞·ªùi m·ªõi]
- **Test Case 1:** [Gi·∫£i th√≠ch test case ƒë·∫ßu ti√™n]
- **Test Case 2:** [Gi·∫£i th√≠ch test case th·ª© hai]
- **K·∫øt lu·∫≠n:** [T·ªïng k·∫øt v·ªÅ test cases]

## üíª Code v√† Gi·∫£i th√≠ch

### Ph∆∞∆°ng ph√°p [T√™n ph∆∞∆°ng ph√°p]
**√ù t∆∞·ªüng:** [Gi·∫£i th√≠ch √Ω t∆∞·ªüng gi·∫£i quy·∫øt]

\`\`\`python
# [Code g·ªëc v·ªõi comment chi ti·∫øt t·ª´ng d√≤ng]
[Code g·ªëc + comment ti·∫øng Vi·ªát]
\`\`\`

**Gi·∫£i th√≠ch chi ti·∫øt:**
1. **D√≤ng X:** [Gi·∫£i th√≠ch d√≤ng code n√†y l√†m g√¨]
2. **D√≤ng Y:** [Gi·∫£i th√≠ch d√≤ng code n√†y l√†m g√¨]
3. **K·∫øt qu·∫£:** [Gi·∫£i th√≠ch k·∫øt qu·∫£ cu·ªëi c√πng]

**ƒê·ªô ph·ª©c t·∫°p:**
- **Th·ªùi gian:** O(...)
- **Kh√¥ng gian:** O(...)

## üìö T√†i li·ªáu tham kh·∫£o
### H·ªçc th√™m:
- [Link 1: Kh√°i ni·ªám c∆° b·∫£n]
- [Link 2: Thu·∫≠t to√°n li√™n quan]

### C√¢u h·ªèi m·ªü r·ªông:
1. [C√¢u h·ªèi ƒë·ªÉ t·ª± h·ªçc th√™m 1]
2. [C√¢u h·ªèi ƒë·ªÉ t·ª± h·ªçc th√™m 2]
3. [C√¢u h·ªèi ƒë·ªÉ t·ª± h·ªçc th√™m 3]

---
${BRAND_INFO}
\`\`\`

OUTPUT: Tr·∫£ v·ªÅ n·ªôi dung markdown ho√†n ch·ªânh theo format tr√™n.
`

export class ExerciseTemplateProcessor {
    static generatePrompt(content: ProblemContent): string {
        return `
${EXERCISE_SYSTEM_PROMPT}

===== N·ªòI DUNG C·∫¶N CHUY·ªÇN ƒê·ªîI =====

**Ti√™u ƒë·ªÅ g·ªëc:** ${content.title}
**M√¥ t·∫£ g·ªëc:** ${content.description}
**URL g·ªëc:** ${content.url}

**C√°c ph∆∞∆°ng ph√°p gi·∫£i (${content.methods.length}):**
${content.methods.map((method, index) => `
--- Ph∆∞∆°ng ph√°p ${index + 1}: ${method.name} ---
M√¥ t·∫£: ${method.description}
Code:
\`\`\`python
${method.sourceCode}
\`\`\`
Gi·∫£i th√≠ch: ${method.explanation}
Complexity: ${method.complexity}
Test Cases c·ªßa ph∆∞∆°ng ph√°p:
${method.testCases.map((tc, i) => `Test ${i + 1}: ${tc}`).join('\n')}
`).join('\n')}

**Solutions kh√°c (${content.solutions.length}):**
${content.solutions.map((solution, index) => `
--- Solution ${index + 1} ---
\`\`\`python
${solution}
\`\`\`
`).join('\n')}

**Test Cases t·ªïng h·ª£p (${content.testCases.length}):**
${content.testCases.map((testCase, index) => `
Test Case ${index + 1}:
${testCase}
`).join('\n')}

===== Y√äU C·∫¶U =====
H√£y chuy·ªÉn ƒë·ªïi n·ªôi dung tr√™n th√†nh b√†i t·∫≠p ti·∫øng Vi·ªát theo QUY TR√åNH GI·∫¢NG D·∫†Y ƒë√£ ch·ªâ ƒë·ªãnh.

L∆ØU √ù QUAN TR·ªåNG:
- TUY·ªÜT ƒê·ªêI gi·ªØ nguy√™n t·∫•t c·∫£ test cases v√† code (ch·ªâ th√™m comment)
- Ng√¥n ng·ªØ ƒë∆°n gi·∫£n cho ng∆∞·ªùi ch∆∞a t·ª´ng h·ªçc l·∫≠p tr√¨nh
- Gi·∫£i th√≠ch thu·∫≠t ng·ªØ k·ªπ thu·∫≠t khi xu·∫•t hi·ªán
- T·∫°o c·∫£m gi√°c th√¢n thi·ªán, khuy·∫øn kh√≠ch
- Ph√π h·ª£p l·∫≠p tr√¨nh n√≥i chung, kh√¥ng ch·ªâ Python
        `
    }

    static validateOutput(output: string): boolean {
        // Ki·ªÉm tra c√≥ ƒë·ªß c√°c section theo quy tr√¨nh m·ªõi
        const requiredSections = [
            '# ', // Title
            '## üìù ƒê·ªÅ b√†i',
            '## üí° Gi·∫£i th√≠ch ƒë·ªÅ b√†i',
            '## üß™ Test Cases',
            '## üîç Gi·∫£i th√≠ch Test Cases',
            '## üíª Code v√† Gi·∫£i th√≠ch',
            '## üìö T√†i li·ªáu tham kh·∫£o'
        ]

        return requiredSections.every(section => output.includes(section))
    }

    static extractMetadata(output: string): {
        title: string
        objective: string
        inputType: string
        outputType: string
        concepts: string[]
        difficulty: string
    } {
        const lines = output.split('\n')

        // Extract title
        const titleLine = lines.find(line => line.startsWith('# '))
        const title = titleLine ? titleLine.replace('# ', '') : 'Untitled'

        // Extract metadata from explanation section
        const objective = this.extractValue(output, '**M·ª•c ti√™u:**') || 'H·ªçc l·∫≠p tr√¨nh c∆° b·∫£n'
        const inputType = this.extractValue(output, '**Input:**') || 'D·ªØ li·ªáu ƒë·∫ßu v√†o'
        const outputType = this.extractValue(output, '**Output:**') || 'K·∫øt qu·∫£ ƒë·∫ßu ra'

        // Extract concepts from terminology section
        const conceptsStr = this.extractValue(output, '**Thu·∫≠t ng·ªØ:**') || ''
        const concepts = conceptsStr.split(',').map(c => c.trim()).filter(c => c)

        // Determine difficulty based on content complexity
        const difficulty = this.determineDifficulty(output)

        return {
            title,
            objective,
            inputType,
            outputType,
            concepts,
            difficulty
        }
    }

    private static extractValue(text: string, key: string): string {
        const regex = new RegExp(`${key.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\s*(.+)`)
        const match = text.match(regex)
        return match ? match[1].trim() : ''
    }

    private static determineDifficulty(output: string): string {
        const content = output.toLowerCase()

        if (content.includes('v√≤ng l·∫∑p') && content.includes('ƒëi·ªÅu ki·ªán') && content.includes('m·∫£ng')) {
            return 'Kh√≥'
        } else if (content.includes('v√≤ng l·∫∑p') || content.includes('ƒëi·ªÅu ki·ªán')) {
            return 'Trung b√¨nh'
        } else {
            return 'D·ªÖ'
        }
    }
} 